{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "CITY_DATA = { 'chicago': 'chicago.csv',\n",
    "              'new york': 'new_york_city.csv',\n",
    "              'washington': 'washington.csv' }\n",
    "\n",
    "CITIES = ['chicago', 'new york', 'washington']\n",
    "\n",
    "MONTHS = ['january', 'february', 'march', 'april', 'may', 'june']\n",
    "\n",
    "DAYS = ['sunday', 'monday', 'tuesday', 'wednesday', \\\n",
    "        'thursday', 'friday', 'saturday' ]\n",
    "\n",
    "def get_user_input(message, user_list):\n",
    "    \"\"\"\n",
    "    An utility function to obtain user specific input value\n",
    "    Args:\n",
    "        (str) message - an information message for a particular request\n",
    "    Returns:\n",
    "        (str) user_data - requested data from user\n",
    "    \"\"\"\n",
    "\n",
    "    while True:\n",
    "        user_data = input(message).lower()\n",
    "        if user_data in user_list:\n",
    "            break\n",
    "        if user_data == 'all':\n",
    "            break\n",
    "    \n",
    "    return user_data\n",
    "\n",
    "def get_filters():\n",
    "    \"\"\"\n",
    "    Asks user to specify a city, month, and day to analyze.\n",
    "\n",
    "    Returns:\n",
    "        (str) city - name of the city to analyze\n",
    "        (str) month - name of the month to filter by, or type \"all\" to apply no month filter\n",
    "        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n",
    "    \"\"\"\n",
    "    print('Hello! Let\\'s explore some US bikeshare data!')\n",
    "    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs\n",
    "    while True:\n",
    "       city = input('Which city do you want to explore Chicago, New York City or Washington? \\n> ').lower()\n",
    "       if city in CITIES:\n",
    "           break\n",
    "\n",
    "    # TO DO: get user input for month (all, january, february, ... , june)\n",
    "    month = get_user_input('Good! Now lets provide a month name to analyze '\\\n",
    "                    'or just say \\'all\\' to apply no month filter. \\n(e.g. all, january, february,...) \\n> ', MONTHS)\n",
    "\n",
    "    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)\n",
    "    day = get_user_input('We\\'re almost done! Just type a week day to analyze'\\\n",
    "                   ' You can type \\'all\\' again to apply no day filter. \\n(e.g. all, monday,...) \\n> ', DAYS)\n",
    "\n",
    "    print('-'*40)\n",
    "    return city, month, day\n",
    "\n",
    "\n",
    "def load_data(city, month, day):\n",
    "    \"\"\"\n",
    "    Loads data for the specified city and filters by month and day if applicable.\n",
    "\n",
    "    Args:\n",
    "        (str) city - name of the city to analyze\n",
    "        (str) month - name of the month to filter by, or \"all\" to apply no month filter\n",
    "        (str) day - name of the day of week to filter by, or \"all\" to apply no day filter\n",
    "    Returns:\n",
    "        df - Pandas DataFrame containing city data filtered by month and day\n",
    "    \"\"\"\n",
    "    # load data file into a dataframe\n",
    "    df = pd.read_csv(CITY_DATA[city])\n",
    "\n",
    "    # convert the Start Time column to datetime\n",
    "    df['Start Time'] = pd.to_datetime(df['Start Time'])\n",
    "\n",
    "    # extract month and day of week and hour from Start Time to create new columns\n",
    "    df['month'] = df['Start Time'].dt.month\n",
    "    df['day_of_week'] = df['Start Time'].dt.weekday_name\n",
    "    df['hour'] = df['Start Time'].dt.hour\n",
    "\n",
    "    # filter by month if applicable\n",
    "    if month != 'all':\n",
    "        month =  MONTHS.index(month) + 1\n",
    "        df = df[ df['month'] == month ]\n",
    "\n",
    "    # filter by day of week if applicable\n",
    "    if day != 'all':\n",
    "        # filter by day of week to create the new dataframe\n",
    "        df = df[ df['day_of_week'] == day.title()]\n",
    "\n",
    "    return df\n",
    "\n",
    "\n",
    "def time_stats(df):\n",
    "    \"\"\"Displays statistics on the most frequent times of travel.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Frequent Times of Travel...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: display the most common month\n",
    "    most_common_month = df['month'].value_counts().idxmax()\n",
    "    print(\"The most common month is :\", most_common_month)\n",
    "\n",
    "    # TO DO: display the most common day of week\n",
    "    most_common_day_of_week = df['day_of_week'].value_counts().idxmax()\n",
    "    print(\"The most common day of week is :\", most_common_day_of_week)\n",
    "\n",
    "    # TO DO: display the most common start hour\n",
    "    most_common_start_hour = df['hour'].value_counts().idxmax()\n",
    "    print(\"The most common start hour is :\", most_common_start_hour)\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def station_stats(df):\n",
    "    \"\"\"Displays statistics on the most popular stations and trip.\"\"\"\n",
    "\n",
    "    print('\\nCalculating The Most Popular Stations and Trip...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: display most commonly used start station\n",
    "    most_common_start_station = df['Start Station'].value_counts().idxmax()\n",
    "    print(\"The most commonly used start station :\", most_common_start_station)\n",
    "\n",
    "    # TO DO: display most commonly used end station\n",
    "    most_common_end_station = df['End Station'].value_counts().idxmax()\n",
    "    print(\"The most commonly used end station :\", most_common_end_station)\n",
    "\n",
    "    # TO DO: display most frequent combination of start station and end station trip\n",
    "    most_common_start_end_station = df[['Start Station', 'End Station']].mode().loc[0]\n",
    "    print(\"The most commonly used start station and end station : {}, {}\"\\\n",
    "            .format(most_common_start_end_station[0], most_common_start_end_station[1]))\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def trip_duration_stats(df):\n",
    "    \"\"\"Displays statistics on the total and average trip duration.\"\"\"\n",
    "\n",
    "    print('\\nCalculating Trip Duration...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: display total travel time\n",
    "    total_travel_time = df['Trip Duration'].sum()\n",
    "    print(\"Total travel time :\", total_travel_time)\n",
    "\n",
    "    # TO DO: display mean travel time\n",
    "    mean_travel_time = df['Trip Duration'].mean()\n",
    "    print(\"Mean travel time :\", mean_travel_time)\n",
    "\n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def user_stats(df):\n",
    "    \"\"\"Displays statistics on bikeshare users.\"\"\"\n",
    "\n",
    "    print('\\nCalculating User Stats...\\n')\n",
    "    start_time = time.time()\n",
    "\n",
    "    # TO DO: Display counts of user types\n",
    "    print(\"Counts of user types:\\n\")\n",
    "    user_counts = df['User Type'].value_counts()\n",
    "\n",
    "    # TO DO: Display counts of gender\n",
    "    #print(\"Counts of gender:\\n\")\n",
    "    #gender_counts = df['Gender'].value_counts()\n",
    "    try:\n",
    "        gender_types = df['Gender'].value_counts()\n",
    "        print('\\nGender Types:\\n', gender_types)\n",
    "        \n",
    "    except KeyError:\n",
    "        print(\"\\nGender Types:\\nNo Genders available for this date, try another filter.\")\n",
    "    # TO DO: Display earliest, most recent, and most common year of birth\n",
    "    try:\n",
    "        Earliest_Year = df['Birth Year'].min()\n",
    "        print('\\nEarliest Year:', Earliest_Year)\n",
    "        \n",
    "    except KeyError:\n",
    "        print(\"\\nEarliest Year:\\nNo data available for this date, try another filter.\")\n",
    "        \n",
    "    \n",
    "    try:\n",
    "        Most_Recent_Year = df['Birth Year'].max()\n",
    "        print('\\nMost Recent Year:', Most_Recent_Year)\n",
    "        \n",
    "    except KeyError:\n",
    "        print(\"\\nMost Recent Year:\\nNo data available for this date, try another filter.\")\n",
    "        \n",
    "        \n",
    "    try:\n",
    "        Most_Common_Year = df['Birth Year'].value_counts().idxmax()\n",
    "        print('\\nMost Common Year:', Most_Common_Year)\n",
    "        \n",
    "    except KeyError:\n",
    "        print(\"\\nMost Common Year:\\nNo data available for this date, try another filter.\")\n",
    "  \n",
    "    print(\"\\nThis took %s seconds.\" % (time.time() - start_time))\n",
    "    print('-'*40)\n",
    "\n",
    "\n",
    "def main():\n",
    "    while True:\n",
    "        city, month, day = get_filters()\n",
    "        df = load_data(city, month, day)\n",
    "\n",
    "        time_stats(df)\n",
    "        station_stats(df)\n",
    "        trip_duration_stats(df)\n",
    "        user_stats(df)\n",
    "\n",
    "        restart = input('\\nWould you like to restart? Enter yes or no.\\n')\n",
    "        if restart.lower() != 'yes':\n",
    "            break\n",
    "\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "\tmain()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
